//Need to test this in xcode asap
//This defines the tetris blocks and sets the behavior for the game.


import Foundation
import SwiftUI

protocol Tetroblock{
    var squares: TetroblockSquares { get set }
    var color: UIColor { get }
    var rotations: [Rotation] { get }
    var currentRotation: Int { get set }
    
    init(_ firstSquareRow: Int, _ firstSquareColumn: Int)
}

extension Tetroblock{
    mutating func move(_ direction: MovementDirectionEnum){
        switch direction {
        case .left:
            squares = getDesiredSquares(direction)
        case .right:
            squares = getDesiredSquares(direction)
        case .down:
            squares = getDesiredSquares(direction)
        case .rotation:
            squares = getDesiredSquares(direction)
            currentRotation += 1
            if currentRotation == rotations.count{
                currentRotation = 0
            }
        }
    }
    
    mutating func move(_ squares: TetroblockSquares){
        self.squares = squares
    }
    
    func getDesiredSquares(_ direction: MovementDirectionEnum) -> TetroblockSquares{
        var desiredSquares: TetroblockSquares?
        
        switch direction {
        case .left:
            desiredSquares = TetroblockSquares(
                firstSquare: Square(squares.firstSquare.row, squares.firstSquare.column - 1),
                secondSquare: Square(squares.secondSquare.row, squares.secondSquare.column - 1),
                thirdSquare: Square(squares.thirdSquare.row, squares.thirdSquare.column - 1),
                fourthSquare: Square(squares.fourthSquare.row, squares.fourthSquare.column - 1))
        case .right:
            desiredSquares = TetroblockSquares(
                firstSquare: Square(squares.firstSquare.row, squares.firstSquare.column + 1),
                secondSquare: Square(squares.secondSquare.row, squares.secondSquare.column + 1),
                thirdSquare: Square(squares.thirdSquare.row, squares.thirdSquare.column + 1),
                fourthSquare: Square(squares.fourthSquare.row, squares.fourthSquare.column + 1))
        case .down:
            desiredSquares = TetroblockSquares(
                firstSquare: Square(squares.firstSquare.row + 1, squares.firstSquare.column),
                secondSquare: Square(squares.secondSquare.row + 1, squares.secondSquare.column),
                thirdSquare: Square(squares.thirdSquare.row + 1, squares.thirdSquare.column),
                fourthSquare: Square(squares.fourthSquare.row + 1, squares.fourthSquare.column))
        case .rotation:
            var nextRotation = currentRotation + 1
            if nextRotation == rotations.count{
                nextRotation = 0
            }
            let firstRowDifference = rotations[nextRotation].tetroblockSquares.firstSquare.row - rotations[currentRotation].tetroblockSquares.firstSquare.row
            let firstColumnDifference = rotations[nextRotation].tetroblockSquares.firstSquare.column - rotations[currentRotation].tetroblockSquares.firstSquare.column
            let secondRowDifference = rotations[nextRotation].tetroblockSquares.secondSquare.row - rotations[currentRotation].tetroblockSquares.secondSquare.row
            let seconColumnDifference = rotations[nextRotation].tetroblockSquares.secondSquare.column - rotations[currentRotation].tetroblockSquares.secondSquare.column
            let thirdRowDifference = rotations[nextRotation].tetroblockSquares.thirdSquare.row - rotations[currentRotation].tetroblockSquares.thirdSquare.row
            let thirdColumnDifference = rotations[nextRotation].tetroblockSquares.thirdSquare.column - rotations[currentRotation].tetroblockSquares.thirdSquare.column
            let fourthRowDifference = rotations[nextRotation].tetroblockSquares.fourthSquare.row - rotations[currentRotation].tetroblockSquares.fourthSquare.row
            let fourthColumnDifference = rotations[nextRotation].tetroblockSquares.fourthSquare.column - rotations[currentRotation].tetroblockSquares.fourthSquare.column
        
            desiredSquares = TetroblockSquares(
                firstSquare: Square(squares.firstSquare.row + firstRowDifference, squares.firstSquare.column + firstColumnDifference),
                secondSquare: Square(squares.secondSquare.row + secondRowDifference, squares.secondSquare.column + seconColumnDifference),
                thirdSquare: Square(squares.thirdSquare.row + thirdRowDifference, squares.thirdSquare.column + thirdColumnDifference),
                fourthSquare: Square(squares.fourthSquare.row + fourthRowDifference, squares.fourthSquare.column + fourthColumnDifference))
        }
        
        return desiredSquares!
    }
}

struct Square{
    var row: Int
    var column: Int
    
    init(_ row: Int = 0, _ column: Int = 0){
        self.row = row
        self.column = column
    }
}

struct TetroblockSquares{
    var firstSquare = Square()
    var secondSquare = Square()
    var thirdSquare = Square()
    var fourthSquare = Square()
}

struct Rotation{
    var tetroblockSquares = TetroblockSquares()
    init(_ firstSquare: Square, _ secondSquare: Square, _ thirdSquare: Square, _ fourthSquare: Square){
        tetroblockSquares.firstSquare = firstSquare
        tetroblockSquares.secondSquare = secondSquare
        tetroblockSquares.thirdSquare = thirdSquare
        tetroblockSquares.fourthSquare = fourthSquare
    }
}



class LTetroblock: Tetroblock{
    var squares = TetroblockSquares()
    let color = ViewHelper.getColorByHex(rgbHexValue: ColorKeys.LTetroblock)
    var rotations = [Rotation]()
    var currentRotation: Int = 0
    
    required init(_ firstSquareRow: Int, _ firstSquareColumn: Int){
        
        rotations.append(Rotation(Square(0, 0), Square(0, 1), Square(0, 2), Square(1, 2)))
        rotations.append(Rotation(Square(2, 0), Square(1, 0), Square(0, 0), Square(0, 1)))
        rotations.append(Rotation(Square(1, 2), Square(1, 1), Square(1, 0), Square(0, 0)))
        rotations.append(Rotation(Square(0, 1), Square(1, 1), Square(2, 1), Square(2, 0)))
        
        
        squares.firstSquare.row = firstSquareRow
        squares.firstSquare.column = firstSquareColumn
        squares.secondSquare.row = firstSquareRow + rotations[0].tetroblockSquares.secondSquare.row
        squares.secondSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.secondSquare.column
        squares.thirdSquare.row = firstSquareRow + rotations[0].tetroblockSquares.thirdSquare.row
        squares.thirdSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.thirdSquare.column
        squares.fourthSquare.row = firstSquareRow + rotations[0].tetroblockSquares.fourthSquare.row
        squares.fourthSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.fourthSquare.column
    }
}

class LTetroblockInverted: Tetroblock{
    var squares = TetroblockSquares()
    let color = ViewHelper.getColorByHex(rgbHexValue: ColorKeys.LTetroblockInverted)
    var rotations = [Rotation]()
    var currentRotation: Int = 0
    
    required init(_ firstSquareRow: Int, _ firstSquareColumn: Int){
        
        rotations.append(Rotation(Square(0, 0), Square(1, 0), Square(2, 0), Square(2, 1)))
        rotations.append(Rotation(Square(0, 2), Square(0, 1), Square(0, 0), Square(1, 0)))
        rotations.append(Rotation(Square(2, 1), Square(1, 1), Square(0, 1), Square(0, 0)))
        rotations.append(Rotation(Square(1, 0), Square(1, 1), Square(1, 2), Square(0, 2)))
        
        // Set rotation 0
        squares.firstSquare.row = firstSquareRow
        squares.firstSquare.column = firstSquareColumn
        squares.secondSquare.row = firstSquareRow + rotations[0].tetroblockSquares.secondSquare.row
        squares.secondSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.secondSquare.column
        squares.thirdSquare.row = firstSquareRow + rotations[0].tetroblockSquares.thirdSquare.row
        squares.thirdSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.thirdSquare.column
        squares.fourthSquare.row = firstSquareRow + rotations[0].tetroblockSquares.fourthSquare.row
        squares.fourthSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.fourthSquare.column
    }
}

class SkewTetroblock: Tetroblock{
    var squares = TetroblockSquares()
    let color = ViewHelper.getColorByHex(rgbHexValue: ColorKeys.skewTetroblock)
    var rotations = [Rotation]()
    var currentRotation: Int = 0
    
    required init(_ firstSquareRow: Int, _ firstSquareColumn: Int){
        
        rotations.append(Rotation(Square(0, 0), Square(1, 0), Square(1, 1), Square(2, 1)))
        rotations.append(Rotation(Square(0, 2), Square(0, 1), Square(1, 1), Square(1, 0)))
        
        
        squares.firstSquare.row = firstSquareRow
        squares.firstSquare.column = firstSquareColumn
        squares.secondSquare.row = firstSquareRow + rotations[0].tetroblockSquares.secondSquare.row
        squares.secondSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.secondSquare.column
        squares.thirdSquare.row = firstSquareRow + rotations[0].tetroblockSquares.thirdSquare.row
        squares.thirdSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.thirdSquare.column
        squares.fourthSquare.row = firstSquareRow + rotations[0].tetroblockSquares.fourthSquare.row
        squares.fourthSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.fourthSquare.column
    }
}

class SkewTetroblockInverted: Tetroblock{
    var squares = TetroblockSquares()
    let color = ViewHelper.getColorByHex(rgbHexValue: ColorKeys.skewTetroblockInverted)
    var rotations = [Rotation]()
    var currentRotation: Int = 0
    
    required init(_ firstSquareRow: Int, _ firstSquareColumn: Int){
        
        rotations.append(Rotation(Square(0, 0), Square(0, 1), Square(1, 1), Square(1, 2)))
        rotations.append(Rotation(Square(0, 1), Square(1, 1), Square(1, 0), Square(2, 0)))
        
        
        squares.firstSquare.row = firstSquareRow
        squares.firstSquare.column = firstSquareColumn
        squares.secondSquare.row = firstSquareRow + rotations[0].tetroblockSquares.secondSquare.row
        squares.secondSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.secondSquare.column
        squares.thirdSquare.row = firstSquareRow + rotations[0].tetroblockSquares.thirdSquare.row
        squares.thirdSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.thirdSquare.column
        squares.fourthSquare.row = firstSquareRow + rotations[0].tetroblockSquares.fourthSquare.row
        squares.fourthSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.fourthSquare.column
    }
}

class TTetroblock: Tetroblock{
    var squares = TetroblockSquares()
    let color = ViewHelper.getColorByHex(rgbHexValue: ColorKeys.TTetroblock)
    var rotations = [Rotation]()
    var currentRotation: Int = 0
    
    required init(_ firstSquareRow: Int, _ firstSquareColumn: Int){
        
        rotations.append(Rotation(Square(0, 0), Square(0, 1), Square(0, 2), Square(1, 1)))
        rotations.append(Rotation(Square(2, 0), Square(1, 0), Square(0, 0), Square(1, 1)))
        rotations.append(Rotation(Square(2, 2), Square(2, 1), Square(2, 0), Square(1, 1)))
        rotations.append(Rotation(Square(0, 1), Square(1, 1), Square(2, 1), Square(1, 0)))
        
        
        squares.firstSquare.row = firstSquareRow
        squares.firstSquare.column = firstSquareColumn
        squares.secondSquare.row = firstSquareRow + rotations[0].tetroblockSquares.secondSquare.row
        squares.secondSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.secondSquare.column
        squares.thirdSquare.row = firstSquareRow + rotations[0].tetroblockSquares.thirdSquare.row
        squares.thirdSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.thirdSquare.column
        squares.fourthSquare.row = firstSquareRow + rotations[0].tetroblockSquares.fourthSquare.row
        squares.fourthSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.fourthSquare.column
    }
}

class StraightTetroblock: Tetroblock{
    var squares = TetroblockSquares()
    let color = ViewHelper.getColorByHex(rgbHexValue: ColorKeys.straightTetroblock)
    var rotations = [Rotation]()
    var currentRotation: Int = 0
    
    required init(_ firstSquareRow: Int, _ firstSquareColumn: Int){
        
        rotations.append(Rotation(Square(0, 0), Square(0, 1), Square(0, 2), Square(0, 3)))
        rotations.append(Rotation(Square(0, 0), Square(1, 0), Square(2, 0), Square(3, 0)))
        
        
        squares.firstSquare.row = firstSquareRow
        squares.firstSquare.column = firstSquareColumn
        squares.secondSquare.row = firstSquareRow + rotations[0].tetroblockSquares.secondSquare.row
        squares.secondSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.secondSquare.column
        squares.thirdSquare.row = firstSquareRow + rotations[0].tetroblockSquares.thirdSquare.row
        squares.thirdSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.thirdSquare.column
        squares.fourthSquare.row = firstSquareRow + rotations[0].tetroblockSquares.fourthSquare.row
        squares.fourthSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.fourthSquare.column
    }
}

class SquareTetroblock: Tetroblock{
    var squares = TetroblockSquares()
    let color = ViewHelper.getColorByHex(rgbHexValue: ColorKeys.squareTetroblock)
    var rotations = [Rotation]()
    var currentRotation: Int = 0
    
    required init(_ firstSquareRow: Int, _ firstSquareColumn: Int){
        
        rotations.append(Rotation(Square(0, 0), Square(0, 1), Square(1, 0), Square(1, 1)))
        
        
        squares.firstSquare.row = firstSquareRow
        squares.firstSquare.column = firstSquareColumn
        squares.secondSquare.row = firstSquareRow + rotations[0].tetroblockSquares.secondSquare.row
        squares.secondSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.secondSquare.column
        squares.thirdSquare.row = firstSquareRow + rotations[0].tetroblockSquares.thirdSquare.row
        squares.thirdSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.thirdSquare.column
        squares.fourthSquare.row = firstSquareRow + rotations[0].tetroblockSquares.fourthSquare.row
        squares.fourthSquare.column = firstSquareColumn + rotations[0].tetroblockSquares.fourthSquare.column
    }
}
